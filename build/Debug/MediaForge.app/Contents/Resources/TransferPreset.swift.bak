import Foundation

/// Represents a saved preset for transfer settings
class TransferPreset: Identifiable, Codable {
    let id: UUID
    var name: String
    var description: String
    
    // Destination folder structure options
    var createDateBasedFolders: Bool // e.g., YYYY-MM-DD folders
    var createCustomDestinationFolder: Bool
    var customDestinationFolder: String?
    
    // File handling options
    var skipHiddenFiles: Bool
    var skipSystemFiles: Bool
    var onlyTransferMediaFiles: Bool
    var createMHLFiles: Bool // Media Hash List files for industry-standard verification
    
    // Verification options
    var verificationLevel: VerificationLevel
    
    init(name: String, description: String = "") {
        self.id = UUID()
        self.name = name
        self.description = description
        self.createDateBasedFolders = false
        self.createCustomDestinationFolder = false
        self.customDestinationFolder = nil
        self.skipHiddenFiles = true
        self.skipSystemFiles = true
        self.onlyTransferMediaFiles = true
        self.createMHLFiles = false
        self.verificationLevel = .checksum
    }
    
    /// Level of verification to perform
    enum VerificationLevel: String, Codable, CaseIterable {
        case none = "None"
        case size = "Size Only"
        case quick = "Quick Check"
        case checksum = "Full Checksum"
        
        var description: String {
            switch self {
            case .none:
                return "No verification, fastest transfer"
            case .size:
                return "Verify file sizes only"
            case .quick:
                return "Sample-based verification (quick)"
            case .checksum:
                return "Full MD5 checksum (most secure)"
            }
        }
    }
}

/// Manages transfer presets including saving and loading
class TransferPresetManager {
    static let shared = TransferPresetManager()
    
    private let userDefaultsKey = "MediaForgePresets"
    
    @Published var presets: [TransferPreset] = []
    
    private init() {
        loadPresets()
        
        // If no presets exist, create default ones
        if presets.isEmpty {
            createDefaultPresets()
        }
    }
    
    private func createDefaultPresets() {
        // Standard backup preset
        let standardBackup = TransferPreset(name: "Standard Backup")
        standardBackup.description = "Basic backup with checksum verification"
        standardBackup.createDateBasedFolders = true
        standardBackup.skipHiddenFiles = true
        standardBackup.skipSystemFiles = true
        standardBackup.onlyTransferMediaFiles = false
        standardBackup.verificationLevel = .checksum
        
        // Quick transfer preset
        let quickTransfer = TransferPreset(name: "Quick Transfer")
        quickTransfer.description = "Fast transfer with minimal verification"
        quickTransfer.createDateBasedFolders = false
        quickTransfer.skipHiddenFiles = true
        quickTransfer.skipSystemFiles = true
        quickTransfer.onlyTransferMediaFiles = true
        quickTransfer.verificationLevel = .size
        
        // Media only preset
        let mediaOnly = TransferPreset(name: "Media Files Only")
        mediaOnly.description = "Only transfers media files with standard verification"
        mediaOnly.createDateBasedFolders = true
        mediaOnly.skipHiddenFiles = true
        mediaOnly.skipSystemFiles = true
        mediaOnly.onlyTransferMediaFiles = true
        mediaOnly.verificationLevel = .checksum
        
        // Add presets
        presets = [standardBackup, quickTransfer, mediaOnly]
        savePresets()
    }
    
    func savePresets() {
        if let encoded = try? JSONEncoder().encode(presets) {
            UserDefaults.standard.set(encoded, forKey: userDefaultsKey)
        }
    }
    
    func loadPresets() {
        if let savedPresets = UserDefaults.standard.data(forKey: userDefaultsKey),
           let decoded = try? JSONDecoder().decode([TransferPreset].self, from: savedPresets) {
            presets = decoded
        }
    }
    
    func addPreset(_ preset: TransferPreset) {
        presets.append(preset)
        savePresets()
    }
    
    func updatePreset(_ preset: TransferPreset) {
        if let index = presets.firstIndex(where: { $0.id == preset.id }) {
            presets[index] = preset
            savePresets()
        }
    }
    
    func deletePreset(_ preset: TransferPreset) {
        presets.removeAll { $0.id == preset.id }
        savePresets()
    }
} 