import SwiftUI

/// A view that supports selecting multiple sources and destinations for transfers
struct MultipleSourcesDestinationsView: View {
    @EnvironmentObject private var viewModel: MediaForgeViewModel
    @State private var showingLabelSheet = false
    @State private var diskForLabeling: Disk? = nil
    @State private var labelText: String = ""
    @State private var showingSourceFolderPicker = false
    @State private var showingDestFolderPicker = false
    @State private var diskForFolderPicking: Disk? = nil
    @State private var selectedPreset: TransferPreset? = nil
    @State private var showPresetSettings = false
    
    var body: some View {
        ZStack {
            // Vibrant gradient background with slight transparency
            LinearGradient(
                gradient: Gradient(colors: [
                    Color.pink.opacity(0.8),
                    Color.purple.opacity(0.8),
                    Color.blue.opacity(0.8),
                    Color.green.opacity(0.8)
                ]),
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .edgesIgnoringSafeArea(.all)
            
            // Main content
            VStack(spacing: 20) {
                // Header
                HStack {
                    Text("MediaForge Pro")
                        .font(.system(size: 36, weight: .bold, design: .rounded))
                        .foregroundColor(.white)
                        .shadow(color: Color.black.opacity(0.2), radius: 5, x: 0, y: 2)
                    
                    Spacer()
                    
                    // Preset selector
                    HStack(spacing: 15) {
                        Text("Preset:")
                            .font(.headline)
                            .foregroundColor(.white)
                        
                        Menu {
                            ForEach(TransferPresetManager.shared.presets) { preset in
                                Button(preset.name) {
                                    selectedPreset = preset
                                }
                            }
                            
                            Divider()
                            
                            Button("Customize...") {
                                showPresetSettings = true
                            }
                        } label: {
                            HStack {
                                Text(selectedPreset?.name ?? "Default")
                                    .foregroundColor(.white)
                                
                                Image(systemName: "chevron.down")
                                    .foregroundColor(.white.opacity(0.8))
                            }
                            .padding(.vertical, 8)
                            .padding(.horizontal, 16)
                            .background(Color.white.opacity(0.2))
                            .cornerRadius(8)
                        }
                    }
                }
                .padding(.horizontal)
                
                // Main content grid (3 columns)
                HStack(alignment: .top, spacing: 20) {
                    // SOURCES COLUMN
                    VStack(alignment: .leading, spacing: 15) {
                        HStack {
                            Text("SOURCES")
                                .font(.headline)
                                .foregroundColor(.white)
                            
                            Spacer()
                            
                            // Add menu for sources
                            Menu {
                                // Only show disks that aren't already sources or destinations
                                ForEach(viewModel.availableDisks.filter { !$0.isSource && !$0.isDestination }) { disk in
                                    Button(disk.displayName) {
                                        viewModel.setDiskAsSource(disk)
                                    }
                                }
                            } label: {
                                Image(systemName: "plus.circle.fill")
                                    .foregroundColor(.white)
                                    .imageScale(.large)
                            }
                        }
                        .padding(.bottom, 5)
                        
                        if viewModel.sources.isEmpty {
                            // Empty sources placeholder
                            ZStack {
                                RoundedRectangle(cornerRadius: 16)
                                    .stroke(style: StrokeStyle(lineWidth: 2, dash: [8]))
                                    .foregroundColor(.white.opacity(0.7))
                                    .frame(height: 120)
                                    .background(
                                        RoundedRectangle(cornerRadius: 16)
                                            .fill(Color.white.opacity(0.15))
                                    )
                                
                                VStack(spacing: 10) {
                                    Image(systemName: "arrow.up.doc.on.clipboard")
                                        .resizable()
                                        .scaledToFit()
                                        .frame(width: 30, height: 30)
                                        .foregroundColor(.white)
                                    
                                    Text("Add a Source")
                                        .font(.subheadline)
                                        .foregroundColor(.white)
                                }
                            }
                        } else {
                            // List of selected sources
                            ScrollView {
                                VStack(spacing: 12) {
                                    ForEach(viewModel.sources) { disk in
                                        ZStack {
                                            RoundedRectangle(cornerRadius: 12)
                                                .fill(Color.blue.opacity(0.3))
                                                .shadow(color: Color.black.opacity(0.1), radius: 5, x: 0, y: 2)
                                            
                                            HStack {
                                                // Disk icon
                                                Image(systemName: disk.hasFullAccess ? disk.icon : "exclamationmark.triangle")
                                                    .resizable()
                                                    .scaledToFit()
                                                    .frame(width: 24, height: 24)
                                                    .foregroundColor(disk.hasFullAccess ? .white : .yellow)
                                                
                                                VStack(alignment: .leading, spacing: 2) {
                                                    Text(disk.displayName)
                                                        .font(.subheadline)
                                                        .fontWeight(.semibold)
                                                        .foregroundColor(.white)
                                                    
                                                    if let sourceFolder = disk.sourceFolder {
                                                        Text("Folder: \(sourceFolder)")
                                                            .font(.caption)
                                                            .foregroundColor(.white.opacity(0.8))
                                                    }
                                                    
                                                    // Space info
                                                    Text(disk.formattedTotalSpace)
                                                        .font(.caption2)
                                                        .foregroundColor(.white.opacity(0.7))
                                                }
                                                
                                                Spacer()
                                                
                                                // Options menu
                                                Menu {
                                                    Button("Set Label...") {
                                                        diskForLabeling = disk
                                                        labelText = disk.label ?? ""
                                                        showingLabelSheet = true
                                                    }
                                                    
                                                    Button("Choose Source Folder...") {
                                                        diskForFolderPicking = disk
                                                        showingSourceFolderPicker = true
                                                    }
                                                    
                                                    Divider()
                                                    
                                                    Button("Remove", role: .destructive) {
                                                        viewModel.setDiskAsUnused(disk)
                                                    }
                                                } label: {
                                                    Image(systemName: "ellipsis.circle")
                                                        .foregroundColor(.white)
                                                }
                                            }
                                            .padding(.horizontal, 12)
                                            .padding(.vertical, 10)
                                        }
                                    }
                                }
                            }
                            .frame(maxHeight: 300)
                        }
                    }
                    .frame(width: 300)
                    .padding()
                    .background(
                        RoundedRectangle(cornerRadius: 16)
                            .fill(Color.black.opacity(0.15))
                    )
                    
                    // AVAILABLE DISKS COLUMN
                    VStack(alignment: .leading, spacing: 15) {
                        Text("AVAILABLE DISKS")
                            .font(.headline)
                            .foregroundColor(.white)
                            .padding(.bottom, 5)
                        
                        // Display available disks in a grid
                        ScrollView {
                            LazyVGrid(columns: [GridItem(.flexible()), GridItem(.flexible())], spacing: 15) {
                                ForEach(viewModel.availableDisks.filter { !$0.isSource && !$0.isDestination }) { disk in
                                    Button {
                                        // Show context menu for disk action
                                    } label: {
                                        VStack {
                                            ZStack {
                                                Circle()
                                                    .fill(diskColor(for: disk))
                                                    .frame(width: 60, height: 60)
                                                    .shadow(color: Color.black.opacity(0.2), radius: 5, x: 0, y: 3)
                                                
                                                Image(systemName: disk.hasFullAccess ? disk.icon : "exclamationmark.triangle")
                                                    .resizable()
                                                    .scaledToFit()
                                                    .frame(width: 28, height: 28)
                                                    .foregroundColor(.white)
                                            }
                                            
                                            Text(disk.name)
                                                .font(.system(size: 12, weight: .medium))
                                                .foregroundColor(.white)
                                                .lineLimit(1)
                                            
                                            Text(disk.formattedTotalSpace)
                                                .font(.system(size: 11, weight: .regular))
                                                .foregroundColor(.white.opacity(0.7))
                                        }
                                        .padding(10)
                                        .background(
                                            RoundedRectangle(cornerRadius: 12)
                                                .fill(Color.white.opacity(0.1))
                                        )
                                        .contextMenu {
                                            Button {
                                                viewModel.setDiskAsSource(disk)
                                            } label: {
                                                Label("Set as Source", systemImage: "arrow.up.doc.on.clipboard")
                                            }
                                            
                                            Button {
                                                viewModel.setDiskAsDestination(disk)
                                            } label: {
                                                Label("Set as Destination", systemImage: "arrow.down.doc.on.clipboard")
                                            }
                                            
                                            Divider()
                                            
                                            Button {
                                                diskForLabeling = disk
                                                labelText = disk.label ?? ""
                                                showingLabelSheet = true
                                            } label: {
                                                Label("Set Label...", systemImage: "tag")
                                            }
                                        }
                                    }
                                    .buttonStyle(PlainButtonStyle())
                                }
                            }
                            .padding(10)
                        }
                        .background(
                            RoundedRectangle(cornerRadius: 16)
                                .fill(Color.white.opacity(0.1))
                        )
                        .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
                    }
                    .frame(width: 300)
                    .padding()
                    .background(
                        RoundedRectangle(cornerRadius: 16)
                            .fill(Color.black.opacity(0.15))
                    )
                    
                    // DESTINATIONS COLUMN
                    VStack(alignment: .leading, spacing: 15) {
                        HStack {
                            Text("DESTINATIONS")
                                .font(.headline)
                                .foregroundColor(.white)
                            
                            Spacer()
                            
                            // Add menu for destinations
                            Menu {
                                // Only show disks that aren't already sources or destinations
                                ForEach(viewModel.availableDisks.filter { !$0.isSource && !$0.isDestination }) { disk in
                                    Button(disk.displayName) {
                                        viewModel.setDiskAsDestination(disk)
                                    }
                                }
                            } label: {
                                Image(systemName: "plus.circle.fill")
                                    .foregroundColor(.white)
                                    .imageScale(.large)
                            }
                        }
                        .padding(.bottom, 5)
                        
                        if viewModel.destinations.isEmpty {
                            // Empty destinations placeholder
                            ZStack {
                                RoundedRectangle(cornerRadius: 16)
                                    .stroke(style: StrokeStyle(lineWidth: 2, dash: [8]))
                                    .foregroundColor(.white.opacity(0.7))
                                    .frame(height: 120)
                                    .background(
                                        RoundedRectangle(cornerRadius: 16)
                                            .fill(Color.white.opacity(0.15))
                                    )
                                
                                VStack(spacing: 10) {
                                    Image(systemName: "arrow.down.doc.on.clipboard")
                                        .resizable()
                                        .scaledToFit()
                                        .frame(width: 30, height: 30)
                                        .foregroundColor(.white)
                                    
                                    Text("Add a Destination")
                                        .font(.subheadline)
                                        .foregroundColor(.white)
                                }
                            }
                        } else {
                            // List of selected destinations
                            ScrollView {
                                VStack(spacing: 12) {
                                    ForEach(viewModel.destinations) { disk in
                                        ZStack {
                                            RoundedRectangle(cornerRadius: 12)
                                                .fill(Color.green.opacity(0.3))
                                                .shadow(color: Color.black.opacity(0.1), radius: 5, x: 0, y: 2)
                                            
                                            HStack {
                                                // Disk icon
                                                Image(systemName: disk.hasFullAccess ? disk.icon : "exclamationmark.triangle")
                                                    .resizable()
                                                    .scaledToFit()
                                                    .frame(width: 24, height: 24)
                                                    .foregroundColor(disk.hasFullAccess ? .white : .yellow)
                                                
                                                VStack(alignment: .leading, spacing: 2) {
                                                    Text(disk.displayName)
                                                        .font(.subheadline)
                                                        .fontWeight(.semibold)
                                                        .foregroundColor(.white)
                                                    
                                                    if let destFolder = disk.destinationFolder {
                                                        Text("Folder: \(destFolder)")
                                                            .font(.caption)
                                                            .foregroundColor(.white.opacity(0.8))
                                                    }
                                                    
                                                    // Free space info
                                                    HStack(spacing: 4) {
                                                        Text("Free: \(disk.formattedFreeSpace)")
                                                            .font(.caption2)
                                                            .foregroundColor(.white.opacity(0.7))
                                                        
                                                        // Free space gauge
                                                        ZStack(alignment: .leading) {
                                                            RoundedRectangle(cornerRadius: 2)
                                                                .frame(width: 40, height: 4)
                                                                .foregroundColor(.white.opacity(0.3))
                                                            
                                                            RoundedRectangle(cornerRadius: 2)
                                                                .frame(width: 40 * disk.freeSpacePercentage, height: 4)
                                                                .foregroundColor(.white.opacity(0.7))
                                                        }
                                                    }
                                                }
                                                
                                                Spacer()
                                                
                                                // Options menu
                                                Menu {
                                                    Button("Set Label...") {
                                                        diskForLabeling = disk
                                                        labelText = disk.label ?? ""
                                                        showingLabelSheet = true
                                                    }
                                                    
                                                    Button("Set Destination Folder...") {
                                                        diskForFolderPicking = disk
                                                        showingDestFolderPicker = true
                                                    }
                                                    
                                                    Divider()
                                                    
                                                    Button("Remove", role: .destructive) {
                                                        viewModel.setDiskAsUnused(disk)
                                                    }
                                                } label: {
                                                    Image(systemName: "ellipsis.circle")
                                                        .foregroundColor(.white)
                                                }
                                            }
                                            .padding(.horizontal, 12)
                                            .padding(.vertical, 10)
                                        }
                                    }
                                }
                            }
                            .frame(maxHeight: 300)
                        }
                    }
                    .frame(width: 300)
                    .padding()
                    .background(
                        RoundedRectangle(cornerRadius: 16)
                            .fill(Color.black.opacity(0.15))
                    )
                }
                
                Spacer()
                
                // Add transfer button
                Button(action: {
                    viewModel.createTransfers()
                    viewModel.startTransfers()
                }) {
                    Text("Add \(viewModel.potentialTransferCount) Transfer\(viewModel.potentialTransferCount == 1 ? "" : "s")")
                        .font(.headline)
                        .foregroundColor(.white)
                        .padding()
                        .frame(width: 220)
                        .background(
                            !viewModel.sources.isEmpty && !viewModel.destinations.isEmpty ?
                                LinearGradient(
                                    gradient: Gradient(colors: [Color.purple, Color.blue]),
                                    startPoint: .leading,
                                    endPoint: .trailing
                                ) :
                                LinearGradient(
                                    gradient: Gradient(colors: [Color.gray.opacity(0.5), Color.gray.opacity(0.7)]),
                                    startPoint: .leading,
                                    endPoint: .trailing
                                )
                        )
                        .cornerRadius(10)
                        .shadow(color: Color.black.opacity(0.2), radius: 5, x: 0, y: 3)
                        .overlay(
                            RoundedRectangle(cornerRadius: 10)
                                .stroke(Color.white.opacity(0.3), lineWidth: 1)
                        )
                }
                .disabled(viewModel.sources.isEmpty || viewModel.destinations.isEmpty)
                .padding(.bottom, 20)
            }
            .padding()
        }
        .alert(isPresented: $viewModel.showPermissionAlert) {
            Alert(
                title: Text("Permission Required"),
                message: Text(viewModel.permissionErrorMessage),
                primaryButton: .default(Text("Settings")) {
                    viewModel.openSystemSettingsForPermissions()
                },
                secondaryButton: .cancel()
            )
        }
        .sheet(isPresented: $showingLabelSheet) {
            if let disk = diskForLabeling {
                LabelDiskView(disk: disk, label: $labelText, isPresented: $showingLabelSheet)
                    .presentationDetents([.height(250)])
            }
        }
    }
    
    // Helper function to get color for disk
    private func diskColor(for disk: Disk) -> Color {
        if disk.isSource {
            return .blue
        } else if disk.isDestination {
            return .green
        } else if !disk.hasFullAccess {
            return .orange
        } else {
            // Return color based on disk type
            switch disk.diskType {
            case .internalDrive:
                return Color(red: 0.2, green: 0.6, blue: 0.9)
            case .externalDrive:
                return Color(red: 0.3, green: 0.8, blue: 0.6)
            case .cameraCard:
                return Color(red: 0.9, green: 0.4, blue: 0.3)
            case .networkStorage:
                return Color(red: 0.8, green: 0.2, blue: 0.8)
            case .removableMedia:
                return Color.orange
            case .unknown:
                return Color.gray
            }
        }
    }
}

/// A view to add labels to disks
struct LabelDiskView: View {
    let disk: Disk
    @Binding var label: String
    @Binding var isPresented: Bool
    
    var body: some View {
        VStack(spacing: 20) {
            Text("Add a label to \(disk.name)")
                .font(.headline)
                .padding(.top)
            
            TextField("Label", text: $label)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding(.horizontal)
            
            HStack {
                Button("Cancel") {
                    isPresented = false
                }
                .buttonStyle(.bordered)
                
                Button("Save") {
                    disk.setLabel(label)
                    isPresented = false
                }
                .buttonStyle(.borderedProminent)
            }
            .padding(.bottom)
        }
        .frame(maxWidth: 300)
    }
}

#Preview {
    MultipleSourcesDestinationsView()
        .environmentObject(MediaForgeViewModel())
} 